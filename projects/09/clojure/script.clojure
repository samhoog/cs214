Script started on 2022-03-18 21:50:45-04:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="173" LINES="12"]
cat ja  te	  Tenoe  ]0;sth6@gold30: ~/cs/214/projects/09/clojure[01;32msth6@gold30[00m:[01;34m~/cs/214/projects/09/clojure[00m$ cat Ten[Kmperatur[K[K[K[K[K[K[K[K[K[Ksrc/Temperature,c[K[K.clj  [Ksrc/TemperatureTester.clj 
;; Temperature.clj is a module for our 'Temperature' type-abstraction.
;;
;; Completed by: Sam Hoogewind
;; Date: March 18, 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Create a record/struct type named Temperature
(defrecord Temperature [degree scale])

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; checkValidity(Degrees, Scale) checks if a given temperature is valid. 
  ;; Receive: Degrees, a Float and Scale, a Character.                     
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn checkValidity [degree scale]
    (if (or (= scale "C") (= scale "K") (= scale "F"))
        true
        false
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make-Temperature constructs a Temperature object from a float and a character. 
;; Receive: degree, a float and scale, a character.
;; Return: the Temperature (degree scale). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Temperature [degree scale]
   (if (checkValidity degree scale)
     (->Temperature degree scale)
     (println "That is not a valid scale.")
   )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getDegree extracts the degree of a Temperature object.
;; Receive: aTemperature, a Temperature.
;; Return: the degree float in aTemperature.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getDegree [^Temperature aTemperature]
  (:degree aTemperature)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getScale extracts the scale of a Temperature object.
;; Receive: aTemperature, a Temperature. 
;; Return: the scale character in aTemperature.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getScale [^Temperature aTemperature]
  (:scale aTemperature)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; printTemperature displays a Temperature object. 
;; Receive: aTemperature, a Temperature, 
;; Output: the string representation of aTemperature. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn printTemperature [^Temperature aTemperature]
  (print(format "%.2f %s \t\t" (getDegree aTemperature) (getScale aTemperature)))
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; toFahrenheit(Temperature) converts a temperature value to fahrenheit. 
  ;; PRE: Tmp has been initialized.                                       
  ;; Receive: Tmp, a Temperature.                                          
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toFahrenheit [^Temperature aTemperature]
    (if (= (getScale aTemperature) "C")
        (make-Temperature (+ 32.0 (* (/ 9.0 5.0) (getDegree aTemperature))) "F")
        (if (= (getScale aTemperature) "K")
            (make-Temperature (+ 32.0 (* (/ 9.0 5.0) (- (getDegree aTemperature) 273.0))) "F")
            (make-Temperature (getDegree aTemperature) (getScale aTemperature))
        )
    )
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; toCelsius(Temperature) converts a temperature value to celsius.       
  ;; PRE: Tmp has been initialized.                                        
  ;; Receive: Tmp, a Temperature.                                          
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toCelsius [^Temperature aTemperature]
    (if (= (getScale aTemperature) "F")
        (make-Temperature (* (/ 5.0 9.0) (- (getDegree aTemperature) 32.0)) "C")
        (if (= (getScale aTemperature) "K")
            (make-Temperature (- (getDegree aTemperature) 273.0) "C")
            (make-Temperature (getDegree aTemperature) (getScale aTemperature))
        )
    )
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; toKelvin(Temperature) converts a temperature value to kelvin.         
  ;; PRE: Tmp has been initialized.                                        
  ;; Receive: Tmp, a Temperature.                                          
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toKelvin [^Temperature aTemperature]
    (if (= (getScale aTemperature) "F")
        (make-Temperature (+ 273.0 ( * ( / 5.0 9.0) (- (getDegree aTemperature) 32.0))) "K")
        (if (= (getScale aTemperature) "C")
            (make-Temperature (+ (getDegree aTemperature) 273.0) "K")
            (make-Temperature (getDegree aTemperature) (getScale aTemperature))
        )   
    )
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; raiseTemp(Temperature, Degrees) updates a degree value. 
  ;; PRE: Tmp has been initialized.                          
  ;; Receive: Tmp, a Temperature and Degrees, a Float.       
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn raise[aTemperature degrees]
    (make-Temperature (+ (getDegree aTemperature) degrees) (getScale aTemperature))
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; lowerTemp(Temperature, Degrees) updates a degree value. 
  ;; PRE: Tmp has been initialized.                          
  ;; Receive: Tmp, a Temperature and Degrees, a Float.       
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lower[aTemperature degrees]
    (make-Temperature (- (getDegree aTemperature) degrees) (getScale aTemperature))
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; equals(Temperature1, Temperature2) compares two temperature degrees. 
  ;; PRE: Tmp1 and Tmp2 have been initialized.                            
  ;; Receive: Tmp1, a Temperature and Tmp2, a Temperature.                
  ;; Output: A boolean if they are equal or not.                          
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn equals[aTemperature1 aTemperature2]
    (= (getDegree (toFahrenheit aTemperature1)) (getDegree (toFahrenheit aTemperature2)))
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; lessThan(Temperature1, Temperature2) compares two temperature degrees. 
  ;; PRE: Tmp1 and Tmp2 have been initialized.                             
  ;; Receive: Tmp1, a Temperature and Tmp2, a Temperature.                  
  ;; Output: A boolean if Tmp1 is less than Tmp2.                           
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lessThan[aTemperature1 aTemperature2]
    (< (getDegree (toFahrenheit aTemperature1)) (getDegree (toFahrenheit aTemperature2)))
)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; readTemp(Temperature) reads in a Temperature.  
  ;; PRE: Tmp has been initialized.                 
  ;; Receive: Tmp, a Temperature.                   
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readTemp[]
    (make-Temperature (read-string (read-line)) (read-line))
);; TemperatureTester.clj tests a Clojure Temperature type,
;; stored in Temperature.clj (in the src directory).
;;
;; Output: the results of testing the Temperature functions.
;;
;; Usage: clojure -m TemperatureTester
;;
;; Completed by: Sam Hoogewind
;; Date: March 18, 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns TemperatureTester)

(load-file "src/Temperature.clj")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A function to print out a table for each temperature unit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn table [baseTemp limitTemp stepValue]
    (printTemperature (toFahrenheit baseTemp))
    (printTemperature (toCelsius baseTemp))
    (printTemperature (toKelvin baseTemp))
    (println)
    
    (let [newTemp (raise baseTemp stepValue)] ;; set the next baseTemp to the old one raised by the stepValue
        (if (lessThan baseTemp limitTemp)
            (table newTemp limitTemp stepValue)
        )
    )

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A simple driver to test our Temperature functions. 
;; Output: the results of testing our Temperature functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                        
      baseTemp (readTemp) 
      limitTemp (readTemp)
      stepValue (read-string (read-line))
    ]
    (table baseTemp limitTemp stepValue)
    (println "\nAll tests passed!\n")
  )
)



]0;sth6@gold30: ~/cs/214/projects/09/clojure[01;32msth6@gold30[00m:[01;34m~/cs/214/projects/09/clojure[00m$ clojure -m TemperatureTester
0.0
F
100.0
C
2.5
0.00 F 		-17.78 C 		255.22 K 		
2.50 F 		-16.39 C 		256.61 K 		
5.00 F 		-15.00 C 		258.00 K 		
7.50 F 		-13.61 C 		259.39 K 		
10.00 F 		-12.22 C 		260.78 K 		
12.50 F 		-10.83 C 		262.17 K 		
15.00 F 		-9.44 C 		263.56 K 		
17.50 F 		-8.06 C 		264.94 K 		
20.00 F 		-6.67 C 		266.33 K 		
22.50 F 		-5.28 C 		267.72 K 		
25.00 F 		-3.89 C 		269.11 K 		
27.50 F 		-2.50 C 		270.50 K 		
30.00 F 		-1.11 C 		271.89 K 		
32.50 F 		0.28 C 		273.28 K 		
35.00 F 		1.67 C 		274.67 K 		
37.50 F 		3.06 C 		276.06 K 		
40.00 F 		4.44 C 		277.44 K 		
42.50 F 		5.83 C 		278.83 K 		
45.00 F 		7.22 C 		280.22 K 		
47.50 F 		8.61 C 		281.61 K 		
50.00 F 		10.00 C 		283.00 K 		
52.50 F 		11.39 C 		284.39 K 		
55.00 F 		12.78 C 		285.78 K 		
57.50 F 		14.17 C 		287.17 K 		
60.00 F 		15.56 C 		288.56 K 		
62.50 F 		16.94 C 		289.94 K 		
65.00 F 		18.33 C 		291.33 K 		
67.50 F 		19.72 C 		292.72 K 		
70.00 F 		21.11 C 		294.11 K 		
72.50 F 		22.50 C 		295.50 K 		
75.00 F 		23.89 C 		296.89 K 		
77.50 F 		25.28 C 		298.28 K 		
80.00 F 		26.67 C 		299.67 K 		
82.50 F 		28.06 C 		301.06 K 		
85.00 F 		29.44 C 		302.44 K 		
87.50 F 		30.83 C 		303.83 K 		
90.00 F 		32.22 C 		305.22 K 		
92.50 F 		33.61 C 		306.61 K 		
95.00 F 		35.00 C 		308.00 K 		
97.50 F 		36.39 C 		309.39 K 		
100.00 F 		37.78 C 		310.78 K 		
102.50 F 		39.17 C 		312.17 K 		
105.00 F 		40.56 C 		313.56 K 		
107.50 F 		41.94 C 		314.94 K 		
110.00 F 		43.33 C 		316.33 K 		
112.50 F 		44.72 C 		317.72 K 		
115.00 F 		46.11 C 		319.11 K 		
117.50 F 		47.50 C 		320.50 K 		
120.00 F 		48.89 C 		321.89 K 		
122.50 F 		50.28 C 		323.28 K 		
125.00 F 		51.67 C 		324.67 K 		
127.50 F 		53.06 C 		326.06 K 		
130.00 F 		54.44 C 		327.44 K 		
132.50 F 		55.83 C 		328.83 K 		
135.00 F 		57.22 C 		330.22 K 		
137.50 F 		58.61 C 		331.61 K 		
140.00 F 		60.00 C 		333.00 K 		
142.50 F 		61.39 C 		334.39 K 		
145.00 F 		62.78 C 		335.78 K 		
147.50 F 		64.17 C 		337.17 K 		
150.00 F 		65.56 C 		338.56 K 		
152.50 F 		66.94 C 		339.94 K 		
155.00 F 		68.33 C 		341.33 K 		
157.50 F 		69.72 C 		342.72 K 		
160.00 F 		71.11 C 		344.11 K 		
162.50 F 		72.50 C 		345.50 K 		
165.00 F 		73.89 C 		346.89 K 		
167.50 F 		75.28 C 		348.28 K 		
170.00 F 		76.67 C 		349.67 K 		
172.50 F 		78.06 C 		351.06 K 		
175.00 F 		79.44 C 		352.44 K 		
177.50 F 		80.83 C 		353.83 K 		
180.00 F 		82.22 C 		355.22 K 		
182.50 F 		83.61 C 		356.61 K 		
185.00 F 		85.00 C 		358.00 K 		
187.50 F 		86.39 C 		359.39 K 		
190.00 F 		87.78 C 		360.78 K 		
192.50 F 		89.17 C 		362.17 K 		
195.00 F 		90.56 C 		363.56 K 		
197.50 F 		91.94 C 		364.94 K 		
200.00 F 		93.33 C 		366.33 K 		
202.50 F 		94.72 C 		367.72 K 		
205.00 F 		96.11 C 		369.11 K 		
207.50 F 		97.50 C 		370.50 K 		
210.00 F 		98.89 C 		371.89 K 		
212.50 F 		100.28 C 		373.28 K 		

All tests passed!

]0;sth6@gold30: ~/cs/214/projects/09/clojure[01;32msth6@gold30[00m:[01;34m~/cs/214/projects/09/clojure[00m$ clojure -m TemperatureTester
0.0 
K
212.0
F
20.0
-459.40 F 		-273.00 C 		0.00 K 		
-423.40 F 		-253.00 C 		20.00 K 		
-387.40 F 		-233.00 C 		40.00 K 		
-351.40 F 		-213.00 C 		60.00 K 		
-315.40 F 		-193.00 C 		80.00 K 		
-279.40 F 		-173.00 C 		100.00 K 		
-243.40 F 		-153.00 C 		120.00 K 		
-207.40 F 		-133.00 C 		140.00 K 		
-171.40 F 		-113.00 C 		160.00 K 		
-135.40 F 		-93.00 C 		180.00 K 		
-99.40 F 		-73.00 C 		200.00 K 		
-63.40 F 		-53.00 C 		220.00 K 		
-27.40 F 		-33.00 C 		240.00 K 		
8.60 F 		-13.00 C 		260.00 K 		
44.60 F 		7.00 C 		280.00 K 		
80.60 F 		27.00 C 		300.00 K 		
116.60 F 		47.00 C 		320.00 K 		
152.60 F 		67.00 C 		340.00 K 		
188.60 F 		87.00 C 		360.00 K 		
224.60 F 		107.00 C 		380.00 K 		

All tests passed!

]0;sth6@gold30: ~/cs/214/projects/09/clojure[01;32msth6@gold30[00m:[01;34m~/cs/214/projects/09/clojure[00m$ ^C
]0;sth6@gold30: ~/cs/214/projects/09/clojure[01;32msth6@gold30[00m:[01;34m~/cs/214/projects/09/clojure[00m$ exit

Script done on 2022-03-18 21:51:49-04:00 [COMMAND_EXIT_CODE="130"]
