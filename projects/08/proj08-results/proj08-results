Script started on 2022-03-10 12:39:38-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="189" LINES="12"]
]0;sth6@gold19: ~/cs/214/projects/08/java[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/java[00m$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name with additional functions.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Sam Hoogewind
 * Date: March 10, 2022
 ************************************************************/

import java.util.Scanner;

public class NameTester  
{
  public static void main(String[] args)
  {
      Name aName = new Name("John", "Paul", "Jones");

      assert aName.getFirst().equals("John") ;
      assert aName.getMiddle().equals("Paul") ;
      assert aName.getLast().equals("Jones") ;

      System.out.println(aName);
      assert aName.toString().equals("John Paul Jones");

      // test changing each name
      aName.setFirst("Samuel");
      aName.setMiddle("Thomas");
      aName.setLast("Hoogewind");

      System.out.println(aName);
      assert aName.toString().equals("Samuel Thomas Hoogewind");
      
      // test lfmi()
      System.out.println(aName.lfmi());
      assert aName.lfmi().equals("Hoogewind, Samuel T.");

      // test read()
      Scanner keyboard = new Scanner(System.in);
      aName.read(keyboard);
      System.out.println(aName);
      System.out.println(aName.lfmi());

      System.out.println("All tests passed!");
  }
}

class Name
{
  private String myFirst, myMiddle, myLast;

  public Name(String first, String middle, String last)
  {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  }

  public String getFirst()
  {
    return myFirst;
  }

  public String getMiddle()
  {
    return myMiddle;
  }

  public String getLast()
  {
    return myLast;
  }

  public String toString()
  {
    return myFirst + ' ' + myMiddle + ' ' + myLast;
  }

  // change the first name
  public void setFirst(String aFirst) 
  {
    myFirst = aFirst;
  }

  // change the middle name
  public void setMiddle(String aMiddle) 
  {
    myMiddle = aMiddle;
  }

  // change the last name
  public void setLast(String aLast) 
  {
    myLast = aLast;
  }

  // return a name in Last-First-MiddleInitial form
  public String lfmi()
  {
    return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";
  }

  // read in a name
  public void read(Scanner keyboard)
  {
    myFirst = keyboard.next();
    myMiddle = keyboard.next();
    myLast = keyboard.next();
  }

}

]0;sth6@gold19: ~/cs/214/projects/08/java[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/java[00m$ javac -deprecation p[Ka[KNameTester.java 
]0;sth6@gold19: ~/cs/214/projects/08/java[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/java[00m$ javac -ea[K[K[K[K[K -ea NameTester
John Paul Jones
Samuel Thomas Hoogewind
Hoogewind, Samuel T.
Justin
Andrew
Voss
Justin Andrew Voss
Voss, Justin A.
All tests passed!
]0;sth6@gold19: ~/cs/214/projects/08/java[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/java[00m$ exit

Script done on 2022-03-10 12:40:01-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 13:21:12-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="189" LINES="12"]
]0;sth6@gold19: ~/cs/214/projects/08/ada[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/ada[00m$ cat name_tester.adb
-- name_tester.adb "test-drives" the Name type with additional functions.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Sam Hoogewind
-- Date: March 10, 2022
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  NAME_SIZE : constant Integer := 9;

  type Name is 
    record
      MyFirst : String(1..NAME_SIZE);
      MyMiddle : String(1..NAME_SIZE);
      MyLast : String(1..NAME_SIZE);
    end record;

  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  procedure Init (TheName : out name; First, Middle, Last : in String) is
  begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
  end Init;

  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  function getFirst(TheName : in Name) return String is
   begin
      return TheName.MyFirst;
   end getFirst;


  function getMiddle(TheName : in Name) return String is
   begin
      return TheName.MyMiddle;
   end getMiddle;


  function getLast(TheName : in Name) return String is
   begin
      return TheName.MyLast;
   end getLast;


  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  function getFullName(theName : in Name) return String is
   begin
      return theName.myFirst & " " & theName.MyMiddle & " " & theName.MyLast;
   end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

   procedure Put(theName : in Name) is
      begin
         Put(theName.myFirst);
         Put(" ");
         Put(theName.MyMiddle);
         Put(" ");
         Put(TheName.MyLast);
      end Put;

  --------------------------------------------------
  -- setFirst(Name) sets myFirst to a new name     -
  -- PRE: theName has been initialized.            -
  -- Receive: theName, a Name and First, a String. -
  --------------------------------------------------

   procedure setFirst(theName : out Name; First : in String) is
      begin
         theName.myFirst := First;
      end setFirst;

  ---------------------------------------------------
  -- setMiddle(Name) sets myMiddle to a new name    -
  -- PRE: theName has been initialized.             -
  -- Receive: theName, a Name and Middle, a String. -
  ---------------------------------------------------

   procedure setMiddle(theName : out Name; Middle : in String) is
      begin
         theName.myMiddle := Middle;
      end setMiddle;

  -------------------------------------------------
  -- setLast(Name) sets myLast to a new name      -
  -- PRE: theName has been initialized.           -
  -- Receive: theName, a Name and Last, a String. -
  -------------------------------------------------

   procedure setLast(theName : out Name; Last : in String) is
      begin
         theName.myLast := Last;
      end setLast;

  ---------------------------------------------------------------
  -- lfmi(Name) returns a name in Last-First-MiddleInitial form -
  -- PRE: theName has been initialized.                         -
  -- Receive: theName, a Name                                   -
  -- Output: The name in Last-First-MiddleInitial form          -
  ---------------------------------------------------------------

   function lfmi(theName : in Name) return String is
      begin
         return theName.myLast & ", " & theName.myFirst & " " & theName.myMiddle(theName.myMiddle'First) & ".";
      end lfmi;

  ----------------------------------------------
  -- read(Name) reads in a new name into aName -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name                  -
  ----------------------------------------------

   procedure read(theName : in Name) is
      first : String(1 .. NAME_SIZE);
      middle : String(1 .. NAME_SIZE);
      last : String(1 .. NAME_SIZE);
      begin
         Put("Make sure your names are 9 characters long with spaces."); New_line;
         Get(first);
         Get(middle);
         Get(last);
         setFirst(aName, first);
         setMiddle(aName, middle);
         setLast(aName, last);
      end read;

begin
   Init(aName, "John     ", "Paul     ", "Jones    ");

   pragma Assert( getFirst(aName) = "John     ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul     ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones    ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John      Paul      Jones    ", 
                    "getFullName() failed");

   Put(aName); New_line;

   -- set new names
   setFirst(aName, "Samuel   ");
   setMiddle(aName, "Thomas   ");
   setLast(aName, "Hoogewind");
   
   -- test setting the new names works
   pragma Assert( getFirst(aName) = "Samuel   ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Thomas   ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Hoogewind", "getLast() failed");
   pragma Assert( getFullName(aName) = "Samuel    Thomas    Hoogewind",
                  "getFulName() failed");
   Put(aName); New_line;
   
   -- test lfmi()
   Put(lfmi(aName)); New_line;
   pragma Assert ( lfmi(aName) = "Hoogewind, Samuel    T.");
   
   -- test read()
   read(aName);
   Put(aName); New_line;
   Put(lfmi(aName)); New_line;

   Put("All tests passed!"); New_line;

end name_tester;

]0;sth6@gold19: ~/cs/214/projects/08/ada[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/ada[00m$ gnatmake name_tester.adb -gnata
x86_64-linux-gnu-gcc-7 -c -gnata name_tester.adb
x86_64-linux-gnu-gnatbind-7 -x name_tester.ali
x86_64-linux-gnu-gnatlink-7 name_tester.ali
]0;sth6@gold19: ~/cs/214/projects/08/ada[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/ada[00m$ ./name_tester 
John      Paul      Jones    
Samuel    Thomas    Hoogewind
Hoogewind, Samuel    T.
Make sure your names are 9 characters long with spaces.
Justin   
Andrew   
Voss     
Justin    Andrew    Voss     
Voss     , Justin    A.
All tests passed!
]0;sth6@gold19: ~/cs/214/projects/08/ada[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/ada[00m$ exit

Script done on 2022-03-10 13:21:36-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 13:55:03-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="189" LINES="12"]
]0;sth6@gold19: ~/cs/214/projects/08/clojure[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/clojure[00m$ cat src/nameTester.clj 
;;;; nameTester.clj creates and tests a clojure Name type with additional functions.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Sam Hoogewind
;;;; Date: March 10, 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [ firstName middleName lastName ] )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [first middle last]
  (->Name first middle last)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName]
  (:firstName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getMiddle [^Name aName]
  (:middleName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getLast [^Name aName]
  (:lastName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toString() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn toString [^Name aName]
  (str (:firstName aName) " " (:middleName aName) " " (:lastName aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn printName [^Name aName]
  (print (toString aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() changes a name object.
;;; Receive: aName, a Name and first, a string.
;;; Output: the aName with changed first name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setFirst [^Name aName first]
  (->Name first (:middleName aName) (:lastName aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() changes a name object.
;;; Receive: aName, a Name and middle, a string.
;;; Output: the aName with changed middle name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setMiddle [^Name aName middle]
  (->Name (:firstName aName) middle (:lastName aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() changes a name object.
;;; Receive: aName, a Name and last, a string.
;;; Output: the aName with changed last name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setLast [^Name aName last]
  (->Name (:firstName aName) (:middleName aName) last)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi(aName) returns a name in Last-First-MiddleInitial form 
;;; Receive: aName, a Name
;;; Output: The name in Last-First-MiddleInitial form  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn lfmi [^Name aName]
  (str (:lastName aName) ", " (:firstName aName) " " (subs(:middleName aName) 0 1) ".")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName reads in a new name and creates it   
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn readName []
  (let
    [ first (read) 
    middle (read) 
    last (read) ]
    (make-Name first middle last)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
     name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
     name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
     name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    ;; test setting the first middle and last name
    (println)
    (assert (= (getFirst (setFirst name1 "Samuel")) "Samuel") "getFirst failed")
    (assert (= (getMiddle (setMiddle name1 "Thomas")) "Thomas") "getMiddle failed")
    (assert (= (getLast (setLast name1 "Hoogewind")) "Hoogewind") "getLast failed")
    (printName (setFirst (setMiddle (setLast name1 "Hoogewind") "Thomas") "Samuel")) (println)
    
    ;; test lfmi() with already set names
    (println)
    (print(lfmi name1)) (println)
    (print(lfmi name2)) (println)
    (print(lfmi name3)) (println) 

    ;; test readName() with user input
    (println)
    (printName(readName))

    (println "\nAll tests passed!\n")
  )
)

]0;sth6@gold19: ~/cs/214/projects/08/clojure[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/clojure[00m$ clojure -m nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

Samuel Thomas Hoogewind

Jones, John P.
Jones, Jane P.
Jones, Jinx J.

Justin
Andrew
Voss
Justin Andrew Voss
All tests passed!

]0;sth6@gold19: ~/cs/214/projects/08/clojure[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/clojure[00m$ exit

Script done on 2022-03-10 13:55:24-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 14:08:33-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="189" LINES="12"]
]0;sth6@gold19: ~/cs/214/projects/08/ruby[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/ruby[00m$ cat NameTester.rb 
# NameTester.rb tests class Name and its operations with additional functions
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sam Hoogewind
# Date: March 10, 2022
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name

   def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
   end

   attr_accessor :first, :middle, :last

   def fullName()
      return first + " " + middle + " " + last
   end

   def print()
      puts(fullName())
      fullName()
   end

   # return the name in Last-First-MiddleInitial form
   def lfmi()
      return last + ", " + first + " " + middle[0] + "."
   end

   # read in new values for name from the keyboard
   def read()
      @first = gets.chomp
      @middle = gets.chomp
      @last = gets.chomp
   end

end


def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"

   # test changing each name
   name.first = "Samuel"
   assert name.first == "Samuel", "first failed"
   name.middle = "Thomas"
   assert name.middle == "Thomas", "middle failed"
   name.last = "Hoogewind"
   assert name.last == "Hoogewind", "last failed"
   name.print
   
   # test lfmi()
   assert name.lfmi == "Hoogewind, Samuel T.", "lfmi failed"
   print name.lfmi + "\n"

   # test read()
   name.read
   name.print
   print name.lfmi + "\n"
   
   print "All tests passed!\n"
end

testName

]0;sth6@gold19: ~/cs/214/projects/08/ruby[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/ruby[00m$ ruby NameTester.rb 
John Paul Jones
Samuel Thomas Hoogewind
Hoogewind, Samuel T.
Justin
Andrew
Voss
Justin Andrew Voss
Voss, Justin A.
All tests passed!
]0;sth6@gold19: ~/cs/214/projects/08/ruby[01;32msth6@gold19[00m:[01;34m~/cs/214/projects/08/ruby[00m$ exit

Script done on 2022-03-10 14:08:49-05:00 [COMMAND_EXIT_CODE="0"]
